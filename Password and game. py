{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sahare431/CM3-CS-1/blob/main/Password%20and%20game.%20py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xo6_18PgEoie"
      },
      "source": [
        "## Part 1 - Guessing Game"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZBhVkWZTElMR",
        "outputId": "9caeabd4-883f-4bcb-d050-ec024ad72235"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Level: 3\n",
            "Guess: 4\n",
            "Too large!\n",
            "Guess: 3\n",
            "Just right!\n"
          ]
        }
      ],
      "source": [
        "# Before every code, we have to structure which libraries are necessary for our code. We are using Random in this case.\n",
        "## But what random does? This imports the \"random\" module, which provides functions to generate random numbers. In this program, it’s used to randomly select a number for the guessing game ---- To generate a random integer between 1 and \"n\"\n",
        "import random\n",
        "\n",
        "# Def Main, we are defining the main function of the program. This is the central place where the logic of the game is written.\n",
        "def main():\n",
        "    # Using While Trues creates an infinite loop, which forces the person to input a valid number\n",
        "    while True:\n",
        "        try:\n",
        "            # Input asks the user for the level (n) of the game, which is the maximum number for guessing\n",
        "            n = int(input(\"Level: \"))\n",
        "            if n > 0:  # Validates that the input is a positive integer\n",
        "                break  # Exits the loop once the input is valid\n",
        "        except ValueError:\n",
        "            # Handles errors when the user provides invalid input, such as letters or symbols\n",
        "            pass\n",
        "    ## This part of the code would change depending on the rules of each game, but for this one, it ensures that the level (n) is a positive integer, as required by the game rules.\n",
        "\n",
        "    # Generate a random number between 1 and n\n",
        "    number = random.randint(1, n)\n",
        "    ## Why it’s important to have a random.randint? This sets the secret number that the user will try to guess.\n",
        "\n",
        "    # Prompt the user to guess the number\n",
        "    while True:\n",
        "        try:\n",
        "            # Input asks the user to guess the number, converting their input to an integer\n",
        "            guess = int(input(\"Guess: \"))\n",
        "            if guess > 0:  # Ensures the guess is a positive integer\n",
        "                if guess < number:\n",
        "                    # Provides feedback if the guess is smaller than the secret number\n",
        "                    print(\"Too small!\")\n",
        "                elif guess > number:\n",
        "                    # Provides feedback if the guess is larger than the secret number ((AGAIN))\n",
        "                    print(\"Too large!\")\n",
        "                else:\n",
        "                    # Confirms the correct guess and ends the game\n",
        "                    print(\"Just right!\")\n",
        "                    break  # Exits the guessing loop\n",
        "        except ValueError:\n",
        "            # Handles errors if the user enters something invalid (e.g., letters or symbols)\n",
        "            pass\n",
        "    ## Except Value Errors, catches errors if the user enters something that cannot be converted to an integer (e.g., letters or special characters), which makes the process to engage with the game in an easier way. The pass statement does nothing, allowing the loop to continue.\n",
        "\n",
        "# The condition if __name__ == \"__main__\": checks if the script is being run directly (not imported as a module).\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2af8IxLNOi-2"
      },
      "source": [
        "## Part 2 - Password Genereator in sequence :)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iXfw-lgwOofm"
      },
      "outputs": [],
      "source": [
        "# Before we start coding, let's structure which libraries we need for this task.\n",
        "# We will use \"random\" for generating random choices and \"string\" for getting character sets like letters and digits.\n",
        "import random\n",
        "import string\n",
        "\n",
        "def main():\n",
        "    # Def Main: The main function to hold the logic of the password generator.\n",
        "\n",
        "    # Asking the user for inputs to determine password composition.\n",
        "    while True:\n",
        "        try:\n",
        "            # Input for how many letters the user wants in their password.\n",
        "            num_letters = int(input(\"How many letters would you like in your password? \"))\n",
        "            # Input for how many symbols the user wants in their password.\n",
        "            num_symbols = int(input(\"How many symbols would you like? \"))\n",
        "            # Input for how many numbers the user wants in their password.\n",
        "            num_numbers = int(input(\"How many numbers would you like? \"))\n",
        "            break  # If all inputs are valid, exit the loop.\n",
        "        except ValueError:\n",
        "            # Except Value Errors: Handles invalid inputs (e.g., letters instead of numbers).\n",
        "            print(\"Please enter a valid number for each field.\")\n",
        "\n",
        "    # Now let's generate the password components.\n",
        "    # Generate the specified number of letters using the `string.ascii_letters` set.\n",
        "    letters = [random.choice(string.ascii_letters) for _ in range(num_letters)]\n",
        "    # Generate the specified number of symbols from a predefined list of symbols.\n",
        "    symbols = [random.choice(\"!@#$%^&*()-_=+[]{};:,.<>?/\") for _ in range(num_symbols)]\n",
        "    # Generate the specified number of digits using the `string.digits` set.\n",
        "    numbers = [random.choice(string.digits) for _ in range(num_numbers)]\n",
        "\n",
        "    # Concatenate all components in sequence (letters first, then symbols, then numbers).\n",
        "    password = \"\".join(letters + symbols + numbers)\n",
        "\n",
        "    # Output the generated password.\n",
        "    print(f\"Here is your password (in sequence): {password}\")\n",
        "\n",
        "# The condition if __name__ == \"__main__\": ensures the program runs when executed directly.\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}